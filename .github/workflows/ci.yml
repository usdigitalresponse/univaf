on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "terraform/**"
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "terraform/**"
      - "docker/postgis/**"

name: Continuous Integration

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      # PostGIS service for use with server tests
      postgres:
        image: "postgis/postgis:13-3.1"
        env:
          POSTGRES_DB: univaf-test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test-password
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-npm-v1-${{ hashFiles('server/package-lock.json', 'loader/package-lock.json', 'ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-v1
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: |
          cd server
          npm ci
          cd ../loader
          npm ci
          cd ../ui
          npm ci

      - name: Run server tests
        if: ${{ always() }}
        run: |
          cd server
          npm run test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: test
          DB_NAME: univaf
          DB_PASSWORD: test-password

      - name: Run loader tests
        if: ${{ always() }}
        env:
          NOCK_BACK_MODE: lockdown
        run: |
          cd loader
          npm run test

      # TODO: We should write some tests :(
      - name: Build UI
        if: ${{ always() }}
        run: |
          cd ui
          NODE_ENV=production npm run build

  lint:
    name: Run linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-npm-v1-${{ hashFiles('server/package-lock.json', 'loader/package-lock.json', 'ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-v1
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: |
          cd server
          npm ci
          cd ../loader
          npm ci
          cd ../ui
          npm ci

      # We have ESLint and Prettier installed separately in each subproject,
      # but this action can only run once per job. So we run the versions
      # installed in the server project on both at once, and have some weird
      # arguments.
      - name: Lint JS Code
        if: github.event_name != 'pull_request' ||
          github.event.pull_request.head.repo.full_name == github.repository
        uses: wearerequired/lint-action@v2
        with:
          eslint: true
          eslint_dir: server/
          eslint_args: . ../loader/ ../ui/
          eslint_extensions: js,ts
          prettier: true
          prettier_dir: server/
          prettier_args: . ../loader/ ../ui/

      - name: Lint JS Code (without GitHub checks)
        if: github.event_name == 'pull_request' &&
          github.event.pull_request.head.repo.full_name != github.repository
        run: |
          cd server
          echo "ESLint:"
          npx eslint --ext 'js,ts' . ../loader/ ../ui/
          echo "--------------------------------------------------------------"
          echo "Prettier:"
          npx prettier --check . ../loader/ ../ui/

  lint_workflows:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cschleiden/actions-linter@v1
        with:
          workflows: '[".github/workflows/*.yaml", ".github/workflows/*.yml"]'
