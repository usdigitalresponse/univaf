on:
  pull_request: {}
  push:
    branches:
      - main
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "terraform/**"
      - "docker/postgis/**"

name: Continuous Integration

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      # PostGIS service for use with server tests
      postgres:
        image: "postgis/postgis:13-3.1"
        env:
          POSTGRES_DB: univaf-test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test-password
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-npm-v1-${{ hashFiles('server/package-lock.json', 'loader/package-lock.json', 'ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-v1
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: |
          cd server
          npm ci
          cd ../loader
          npm ci
          cd ../ui
          npm ci

      - name: Run server tests
        run: |
          cd server
          npm run test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: test
          DB_NAME: univaf
          DB_PASSWORD: test-password

      - name: Run loader tests
        env:
          NOCK_BACK_MODE: lockdown
        run: |
          cd loader
          npm run test

      # TODO: We should write some tests :(
      - name: Build UI
        run: |
          cd ui
          NODE_ENV=production npm build

  lint:
    name: Run linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-npm-v1-${{ hashFiles('server/package-lock.json', 'loader/package-lock.json', 'ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-v1
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: |
          cd server
          npm ci
          cd ../loader
          npm ci
          cd ../ui
          npm ci

      # We have ESLint and Prettier installed separately in each subproject,
      # but this action can only run once per job. So we run the versions
      # installed in the server project on both at once, and have some weird
      # arguments.
      - name: Lint JS Code
        if: github.event_name != 'pull_request' ||
          github.event.pull_request.head.repo.full_name == github.repository
        uses: wearerequired/lint-action@v2
        with:
          eslint: true
          eslint_dir: server/
          eslint_args: . ../loader/ ../ui/
          eslint_extensions: js,ts
          prettier: true
          prettier_dir: server/
          prettier_args: . ../loader/ ../ui/

      - name: Lint JS Code (without GitHub checks)
        if: github.event_name == 'pull_request' &&
          github.event.pull_request.head.repo.full_name != github.repository
        run: |
          cd server
          echo "ESLint:"
          npx eslint --ext 'js,ts' . ../loader/ ../ui/
          echo "--------------------------------------------------------------"
          echo "Prettier:"
          npx prettier --check . ../loader/ ../ui/

  lint_workflows:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cschleiden/actions-linter@v1
        with:
          workflows: '[".github/workflows/*.yaml", ".github/workflows/*.yml"]'

  build_docker:
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Instead of building all combinations of a set of options, just build
        # these particular combinations.
        include:
          - repository: univaf-server
            dockerfile: "./server/Dockerfile"
            build_path: "./server"

          - repository: univaf-loader
            dockerfile: "./loader/Dockerfile"
            build_path: "./loader"
    env:
      ECR_REPOSITORY: ${{ matrix.repository }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v3

      - name: Build ${{ matrix.repository }}
        run: |
          docker build \
            -t dev/$ECR_REPOSITORY:$IMAGE_TAG \
            -f ${{ matrix.dockerfile }} \
            --build-arg RELEASE="${IMAGE_TAG}" \
            ${{ matrix.build_path }}

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push ${{ matrix.repository }} latest
        if: github.ref == 'refs/heads/main'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag dev/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    if: github.ref == 'refs/heads/main'
    needs:
      - build_docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Create + push deploy commit
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions-bot@usdigitalresponse.org"

          ./scripts/deploy_infra.sh
          # FIXME: uncomment this once we are certain the `if` blocked this from running on other branches!
          # git push
