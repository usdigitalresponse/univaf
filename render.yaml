# Configure deployment on Render.com infrastructure.
# For info on options, see: https://render.com/docs/blueprint-spec

databases:
  - name: univaf-db
    region: oregon
    plan: standard plus
    databaseName: univaf_db
    user: univaf
    # Don't allow connections from the public internet.
    # If you need to run scripts or log into the database directly, you should
    # start a shell or SSH session for one of our internal services from the
    # Render dashboard, and log in through that.
    ipAllowList: []

services:
  # Run the DataDog agent as a separate service, effectively making it a proxy
  # for custom metrics sending from our other services.
  #
  # While this is recommended by Render, it's definitely not what the agent was
  # designed for and involves plenty of caveats about metrics management. One
  # of these is that it sends a lot of system metrics that are pointless, since
  # it is on virtual machine all by itself with nothing else utilizing the
  # system in a meaningful way. We "fix" that using the `ECS_FARGATE` env var.
  - name: DataDog Agent
    region: oregon
    type: pserv
    plan: starter
    env: docker
    repo: "https://github.com/render-examples/datadog-agent.git"
    branch: main
    envVars:
      - key: DD_API_KEY
        sync: false
      - key: DD_SITE
        sync: false
      # HACK: Make the agent think it is on Fargate, preventing it from sending
      # pointless system metrics (since nothing else is running on this system).
      - key: ECS_FARGATE
        value: "true"

  - name: API Server
    region: oregon
    type: web
    plan: starter plus
    env: node
    repo: "https://github.com/usdigitalresponse/univaf.git"
    branch: main
    scaling:
      minInstances: 1
      maxInstances: 2
      targetMemoryPercent: 60 # optional if targetCPUPercent is set
      targetCPUPercent: 70 # optional if targetMemory is set
    buildFilter:
      paths:
        - server/**
    buildCommand: |
      cd server
      npm ci --production=false
      npm run build
      npm prune --production
    startCommand: "cd server && npm run migrate && node ./dist/src/server.js"
    healthCheckPath: "/health"
    domains:
      - univaf.usdigitalresponse.org
      - getmyvax.org
      - www.getmyvax.org
      - render.getmyvax.org
    envVars:
      - fromGroup: "Server Environment"
      - &DD_AGENT_HOST
        key: DD_AGENT_HOST
        fromService:
          name: DataDog Agent
          type: pserv
          property: host
      - &DB_URL
        key: DB_URL
        fromDatabase:
          name: univaf-db
          property: connectionString

  # Dump database and historical log files in S3
  - name: "Daily Data Snapshot"
    region: oregon
    type: cron
    schedule: "0 1 * * *"
    # The main bottleneck on this job is actually uploading to S3; even minimal
    # CPU/memory don't impact overall run time.
    plan: starter
    env: node
    repo: "https://github.com/usdigitalresponse/univaf.git"
    branch: main
    buildFilter:
      paths:
        - server/**
    buildCommand: |
      cd server
      npm ci --production=false
      npm run build
      npm prune --production
    startCommand: |
      cd server
      node scripts/availability_dump.js --write-to-s3 --clear-log
    envVars:
      - fromGroup: "Server Environment"
      - *DD_AGENT_HOST
      - *DB_URL
      - key: DATA_SNAPSHOT_S3_BUCKET
        value: "univaf-data-snapshots"
      - key: AWS_ACCESS_KEY_ID
        sync: false
      - key: AWS_SECRET_ACCESS_KEY
        sync: false
      - key: AWS_REGION
        value: "us-west-2"
      - key: AWS_DEFAULT_REGION
        value: "us-west-2"

  # Loaders -----------------------------------------------------------------
  # These scheduled jobs run the loader with one source each.
  # NOTE: This first loader also defines properties for re-use by the others.
  - &loader-config
    name: "Loader: CVS SMART"
    schedule: "0/10 * * * *" # Every 10 minutes
    startCommand: |
      cd loader
      bin/univaf-loader.js cvsSmart --send --compact
    # Common options used for all crons. (Other configs use `<<` to repeat this
    # cron job's configuration and override the above, non-common values.)
    plan: "starter plus"
    type: cron
    env: node
    region: oregon
    autoDeploy: true
    repo: "https://github.com/usdigitalresponse/univaf.git"
    branch: main
    buildFilter:
      paths:
        - loader/**
    buildCommand: |
      cd loader
      npm ci --production=true
    envVars:
      - fromGroup: "Loader Environment"

  - <<: *loader-config
    name: "Loader: NJVSS"
    schedule: "0/5 * * * *" # Every five minutes
    startCommand: |
      cd loader
      bin/univaf-loader.js njvss --send --compact
    envVars:
      - fromGroup: "Loader Environment"
      - key: NJVSS_AWS_KEY_ID
        sync: false
      - key: NJVSS_AWS_SECRET_KEY
        sync: false

  - <<: *loader-config
    name: "Loader: Rite Aid API"
    schedule: "0/30 * * * *" # Every 30 minutes
    # Our API key does not permit queries in CO, so it is missing from this list.
    startCommand: |
      cd loader
      bin/univaf-loader.js riteAidApi --send --compact --states "CA,CT,DE,ID,MA,MD,MI,NH,NJ,NV,NY,OH,OR,PA,VA,VT,WA"
    envVars:
      - fromGroup: "Loader Environment"
      - key: RITE_AID_URL
        sync: false
      - key: RITE_AID_KEY
        sync: false

  - <<: *loader-config
    name: "Loader: Rite Aid Scraper"
    schedule: "0/10 * * * *" # Every 10 minutes
    startCommand: |
      cd loader
      bin/univaf-loader.js riteAidScraper --send --compact

  - <<: *loader-config
    name: "Loader: Walgreens SMART"
    schedule: "2/10 * * * *" # Every 10 minutes
    startCommand: |
      cd loader
      bin/univaf-loader.js walgreensSmart --send --compact

  - <<: *loader-config
    name: "Loader: Kroger SMART"
    schedule: "4/10 * * * *" # Every 10 minutes
    startCommand: |
      cd loader
      bin/univaf-loader.js krogerSmart --send --compact

  - <<: *loader-config
    name: "Loader: Albertsons"
    schedule: "6/10 * * * *" # Every 10 minutes
    startCommand: |
      cd loader
      bin/univaf-loader.js albertsons --send --compact

  - <<: *loader-config
    name: "Loader: HyVee"
    schedule: "8/10 * * * *" # Every 10 minutes
    startCommand: |
      cd loader
      bin/univaf-loader.js hyvee --send --compact

  - <<: *loader-config
    name: "Loader: H-E-B"
    schedule: "1/10 * * * *" # Every 10 minutes
    startCommand: |
      cd loader
      bin/univaf-loader.js heb --send --compact

  - <<: *loader-config
    name: "Loader: WA Dept. of Health"
    schedule: "3/5 * * * *" # Every 5 minutes
    startCommand: |
      cd loader
      bin/univaf-loader.js waDoh --send --compact

  - <<: *loader-config
    name: "Loader: CDC Open Data API"
    schedule: "0 0,12 * * *" # Twice a day
    startCommand: |
      cd loader
      bin/univaf-loader.js cdcApi --send --compact

  - <<: *loader-config
    name: "Loader: PrepMod"
    schedule: "9/10 * * * *" # Every 10 minutes
    startCommand: |
      cd loader
      bin/univaf-loader.js prepmod --send --compact --states "AK,WA" --hide-missing-locations

envVarGroups:
  - name: "Server Environment"
    envVars:
      - key: NODE_VERSION
        value: "16.18.0"
      - key: NODE_ENV
        value: production
      - key: API_KEYS
        sync: false
      - key: PRIMARY_HOST
        sync: false
      - key: SENTRY_DSN
        sync: false
      - key: SENTRY_TRACES_SAMPLE_RATE
        value: "0.01"
      - key: SENTRY_ENVIRONMENT
        value: render
      - key: DB_POOL_SIZE_AVAILABILITY
        value: "5"

  - name: "Loader Environment"
    envVars:
      - key: NODE_VERSION
        value: "16.18.0"
      - key: NODE_ENV
        value: production
      - key: API_URL
        sync: false
      - key: API_KEY
        sync: false
      - key: SENTRY_DSN
        sync: false
      - key: SENTRY_TRACES_SAMPLE_RATE
        value: "0.01"
      - key: SENTRY_ENVIRONMENT
        value: render
      - key: DD_API_KEY
        sync: false
