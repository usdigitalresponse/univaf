openapi: 3.0.0
servers: []
info:
  version: "0.1.0"
  title: "COVID-19 Vaccine Appointment Availability API"
  description: |
    This API provides combined information about COVID-19 vaccination
    appointment availability at locations across the United States in a single,
    standard format. Data is sourced from a variety of official data sources
    (e.g. from CVS Pharmacy) and unofficial data sources (e.g. web scraping and
    volunteer phone banking). This API is built and maintained by
    [U.S. Digital Response](https://usdigitalresponse.org) in partnership with
    the State of New Jersey Office of Innovation, VaccineSpotter.org, and
    Vaccinate the States.


    ## Data Sources

    Data is currently sourced from:
    - CVS Pharmacy (source names: `univaf-cvs-api`, `univaf-cvs-smart`)
    - Walgreens Pharmacy (source name: `univaf-walgreens-smart`)
    - Rite Aid Pharmacy (source name: `univaf-rite-aid-api`)
    - Albertsons (source name: `univaf-albertsons`)
    - HyVee (source name: `univaf-hyvee`)
    - PrepMod (source name: `univaf-prepmod`)
    - State of New Jersey Vaccine Scheduling System (source name: `univaf-njvss`)
    - VaccineSpotter.org (source names: `univaf-vaccinespotter`, `vaccinespotter`)
    - Centers for Disease Control (CDC) (source name: `cdc`, `univaf-cdc`)

    Generally speaking, `univaf-*` sources are implemented directly in this
    codebase, while others are implemented by partners. For example,
    `univaf-vaccinespotter` is used when we loaded data from VaccineSpotter's
    API, but `vaccinespotter` is used when VaccineSpotter *sent* data directly.

    `*-smart` indicates the source reads data from an API that implement the
    [SMART Scheduling Links](https://github.com/smart-on-fhir/smart-scheduling-links/)
    standard, a national standard for vaccine appointment availability data.
    Other names indicate custom or proprietary APIs.

    See below for detailed notes and caveats on some sources.


    ### Albertsons (`univaf-albertsons`)

    [Albertsons](https://www.albertsonscompanies.com/) is the parent company for
    a number of major grocery store and pharmacy chains. This source provides
    data for the following stores:
    - ACME
    - Albertsons/Albertsons Market
    - Amigos
    - Carrs
    - Haggen
    - Jewel-Osco
    - Lucky
    - Market Street
    - Pak ’n Save
    - Pavilions
    - Randalls/Randalls Pharmacy
    - Safeway
    - Shaw’s
    - Tom Thumb
    - United Supermarkets
    - Vons

    Albertsons does not provide day-by-day counts of appointment availability
    or specific appointment slot times; only that slots are generally available
    and for what vaccine product.


    ### HyVee (`univaf-hyvee`)

    [HyVee](https://www.hy-vee.com/corporate) is a large employee-co-op grocery
    chain in the midwest. The `univaf-hyvee` source scrapes their booking
    website’s API for data about vaccine products and availability. It does not
    gather available appointment counts by day (`capacity`) or individual
    appointment slots (`slots`).


    ### PrepMod (`univaf-prepmod`)

    PrepMod is a clinic management tool in use by many public health departments
    and built by
    [Maryland Partnership for Prevention](https://www.immunizemaryland.org).
    It is designed around one-off *events*, so there are some caveats with how
    we map clinic events to physical locations in this API. In particular:

    - A location’s top-level `booking_url` property is generally the best link
        for somebody who wants to book a vaccination. It links to a search
        results page with criteria that match the location. However, there are
        some caveats here:
        - Most locations have multiple listings — most PrepMod “clincs” are
            single-day events, so a given location may have one listing for each
            day, or sometimes one for each day & vaccine type combination (it
            depends on how the public health department sets things up).
        - It may also list *other* locations that aren’t exact matches. PrepMod
            searches are based on the centroid of a zip code, and so may include
            additional similarly named clinics nearby. (This is most often a
            problem for mobile clinics, where multiple nearby locations share
            the same name, e.g. “Pop-up Clinic - Anchorage Health Department.”)
    - A location’s `info_url` property links to a listing of all the clinics
        managed by a given PrepMod server, and may include *many* different
        locations.
    - Each slot in a location’s `availability.slots` array has a relatively
        unique `booking_url` that lets you book that exact slot. However, the
        list of vaccines available may include more than are actually offered
        for that slot. PrepMod's API unfortunately doesn't provide fine-grained
        enough info to explain which vaccines are available for which slot.


    ### Centers for Disease Control (`cdc`, `univaf-cdc`)

    **The Centers for Disease Control (CDC) publishes open data about vaccine
    stock, not appointments.** We include it because it provides valuable other
    details, like which vaccine products are available or what the operating
    hours are at a given location, that other sources do not.

    In general, you should only use it in combination with other sources (the
    default behavior), meaning the API will show appointment availability from
    a different, more accurate source, but add other details from this one.

    If you’re looking for 100% accurate information about appointments
    (see “appointments vs. stock” below), you should use the `sources` query
    parameter to strip out the `cdc` source when calling the API.

    Stock information from the CDC is also extremely rough — many locations
    report this information by hand at the end of a day, or every few days,
    so it is not always completely up to date. The CDC also includes two
    separate indicators of vaccine stock that often conflict (whether vaccines
    are in stock, and roughly how long that stock is expected to last). We
    currently take an optimistic approach here, and report availability if
    either indicator shows some stock.


    ## Appointments vs. Stock

    This API does its best to provide reliable information about vaccine
    *appointment* availability. That’s different from many official sources
    (such as the CDC), which mainly provide information about what vaccines are
    *in stock* at a given location. One reason we built this API is that stock
    turns out not to relate to whether *appointments* are bookable at all.

    For example, we’ve seen all of the following approaches at various clinics:

    - A location may be out of stock, but still be booking future appointments
      under the assumption that vaccine shipments will arrive on time.
    - Alternatively, a location may stop booking appointments as soon as they
      run out of stock because they are not confident about future shipments.
    - A location may have stock, but all of it is spoken for in appointments
      that have already been booked, so they are not accepting new apointments.

    As of late summer 2021, demand is lower than supply at *most* locations, so
    having vaccines in stock more often indicates appointments are available.
    This is still not *always* true, though.


    ## External IDs

    Every location has a list of “external IDs” in the `external_ids` property.
    These represent ways that other systems might identify the same location
    (for example, the store number for a CVS pharmacy, or the ID of the same
    site in [vaccines.gov](https://vaccines.gov)). An external ID is an array,
    where the first element names system (e.g. `cvs`) and the second is the ID
    in that system. For example:

    ```js
    [
      // CVS Store #10047
      ["cvs", "10047"],
      // ID on the Vaccines.gov website
      ["vaccines_gov", "56789b30-ed05-4b28-b864-0b21b048a341"]
    ]
    ```

    In general, these external IDs are unique to a location (that is, no two
    locations in this API should ever have an identical `[system, id]`
    combination).

    **However, the `vtrcks` and `npi_usa` systems are not
    unique!** They exist in `external_ids` for historical reasons (we thought
    these were unique early on, and later learned this was not so). You should
    not assume a given `vtrcks` or `npi_usa` ID represents only one location.

    You can also look up locations by their external ID. The `id` path parameter
    can be an external ID in the form `system:id` instead of the actual location
    ID. For example, these paths all get the same location:

    ```txt
    /api/edge/locations/215f56ac-8bda-4ae9-ad5e-a567ebe8c1bb
    /api/edge/locations/cvs:10047
    /api/edge/locations/vaccines_gov:56789b30-ed05-4b28-b864-0b21b048a341
    ```

    ## Eligible Age Ranges

    Vaccines *and* locations have age ranges they are authorized for, so be
    careful to check both when displaying information about availability. For
    example, a vaccine may be authorized for people older than 6 months, but
    the location may only be authorized to take patients older than 60 months
    (5 years).

    When it comes to a location, pharmacists and clinicians are each authorized
    to administer vaccines to people of a particular age, so the minimum age
    a location can handle is determined by its staff (and possibly other
    policies of the organization managing the location). You can find this info
    in the `minimum_age_months` field of a location. Please note we don’t always
    have this info, the field may be null.

    Each vaccine is also designed and authorized for a particular age range.
    These are indicated by the different codes we use in the
    `availability.products` field. You can look up more detailed information
    about them from the CDC at
    https://www.cdc.gov/vaccines/programs/iis/COVID-19-related-codes.html.
  contact:
    email: univaf@usdigitalresponse.org
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"
paths:
  "/api/edge/locations":
    get:
      summary: List locations + availability
      description: |
        List out known locations, including their current appointment
        availability. This responds in paginated batches of 2,000 locations.
        Use the `links.next` property to get a URL to the next page of results.

        The availability information included here may merge data from multiple
        sources. To get individual availability data from each source, use the
        `/api/edge/availability` endpoint.
      parameters:
        - in: query
          name: state
          description: Get locations in a particular state. Should be the USPS abbreviation for that state, e.g. `NJ` for New Jersey.
          required: false
          schema:
            type: string
        - in: query
          name: limit
          description: maximum number of records to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 2000
        - in: query
          name: page_next
          description: Indicates where to resume from in a paginated request.
          schema:
            type: string
        - in: query
          name: sources
          description: |
            List of data sources that should be included when building the
            `availability` object for each location. The list can be comma
            separated or you can specify `sources` multiple times.

            This API sources data in a variety of ways. If you'd like to limit
            availability data only to APIs from CVS and Rite Aid, for example,
            you might set:

            ```
            ?sources=univaf-cvs-smart,univaf-rite-aid-api
            ```

            See ["Data Sources"](#section/Data-Sources) to list of source names.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: List of locations + availability
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationsPage"

        "422":
          description: bad input parameter
  "/api/edge/locations.ndjson":
    get:
      summary: List locations + availability
      description: |
        List out known locations, including their current appointment
        availability. This streams out as many results as possible as
        newline-delimted JSON objects for 25 seconds. If it hasn't returned all
        results in that timeframe, the last object will be:
        ```
        { "__next__": "<url_to_resume_from>" }
        ```

        The availability information included here may merge data from multiple
        sources. To get individual availability data from each source, use the
        `/api/edge/availability` endpoint.
      parameters:
        - in: query
          name: state
          description: Get locations in a particular state. Should be the USPS abbreviation for that state, e.g. `NJ` for New Jersey.
          required: false
          schema:
            type: string
        - in: query
          name: limit
          description: maximum number of records to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 2000
        - in: query
          name: page_next
          description: Indicates where to resume from in a paginated request.
          schema:
            type: string
        - in: query
          name: sources
          description: |
            List of data sources that should be included when building the
            `availability` object for each location. The list can be comma
            separated or you can specify `sources` multiple times.

            This API sources data in a variety of ways. If you'd like to limit
            availability data only to APIs from CVS and Rite Aid, for example,
            you might set:

            ```
            ?sources=univaf-cvs-smart,univaf-rite-aid-api
            ```

            See ["Data Sources"](#section/Data-Sources) to list of source names.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: List of locations + availability
          content:
            application/x-ndjson:
              schema:
                $ref: "#/components/schemas/LocationWithAvailability"
        "422":
          description: bad input parameter
  "/api/edge/locations/{id}":
    get:
      summary: Get a single location
      description: |
        Get a single location and its current availability.

        The availability information included here may merge data from multiple
        sources. To get individual availability data from each source, use the
        `/api/edge/availability` endpoint.
      parameters:
        - in: path
          name: id
          description: ID of the location to get
          required: true
          schema:
            type: string
        - in: query
          name: sources
          description: |
            List of data sources that should be included when building the
            `availability` object for each location. The list can be comma
            separated or you can specify `sources` multiple times.

            This API sources data in a variety of ways. If you'd like to limit
            availability data only to APIs from CVS and Rite Aid, for example,
            you might set:

            ```
            ?sources=univaf-cvs-smart,univaf-rite-aid-api
            ```

            See ["Data Sources"](#section/Data-Sources) to list of source names.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Location
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/LocationWithAvailability"

        "422":
          description: bad input parameter
  "/api/edge/availability":
    get:
      summary: List availability records
      description: |
        List the latest availability for each location + source combination.
        Note this may list multiple results per location. (The `/locations`
        endpoint lists combined availability that merges multiple sources for
        each location.)

        This is a paginated response. Use the `links.next` property to get the
        URL for the next page of results, if any.
      parameters:
        - in: query
          name: limit
          description: maximum number of records to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 2000
        - in: query
          name: page_next
          description: Indicates where to resume from in a paginated request.
          schema:
            type: string
      responses:
        "200":
          description: List of availability recods
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvailabilityPage"

        "422":
          description: bad input parameter
  "/api/edge/update":
    post:
      summary: Update availability
      description: |
        Adds/updates availability data for a given location and source. If the
        location doesn’t exist, it will be created. Including the
        `update_location=true` query parameter will cause existing locations to
        be updated with any new data in the POST body.

        The POST body should be a single Location + Availability record, similar
        to what’s returned from `/api/edge/locations/{id}` (but without the
        wrapper object that has the `data` property).

        The `location.external_ids` field may be formatted as an object or as a
        list of lists (regular or 'v2' external_id format).

        Locations are looked up by `location.id` if present, or by any of the
        entries in `location.external_ids`.
      responses:
        "200":
          description: item updated
        "201":
          description: item created
        "422":
          description: invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationUpdate"
        description: Location and availability to update/add.
  "/smart-scheduling/$bulk-publish":
    get:
      summary: "SMART Scheduling Links"
      description: |
        Provides location data according to the [SMART Scheduling Links standard](https://github.com/smart-on-fhir/smart-scheduling-links/specification.md)
        and follows the [guidelines for Slot Aggregators](https://github.com/smart-on-fhir/smart-scheduling-links/blob/master/specification.md#slot-aggregators).

        Some particulars worth noting:

        - Locations use the `meta.lastUpdated` to denote when information *about
          the location* was last changed, not when availability was (this
          matches the FHIR standard). For availability update times, check
          *schedules* for `meta.extension` entries where `url == "http://hl7.org/fhir/StructureDefinition/lastSourceSync"`.
          See the [section on freshness in the specification](https://github.com/smart-on-fhir/smart-scheduling-links/blob/master/specification.md#indicate-data-freshness)
          for details.

        - Locations currently have a single schedule. If product and dose info
          is known, all available products and doses will be listed as
          extensions on that schedule, rather than separate schedules for each
          combination. (We may switch to multiple schedules in the future.)

        - All schedules include the `"http://fhir-registry.smarthealthit.org/StructureDefinition/has-availability"`
          extension. If you only need to know whether there are *some*
          appointments available and don’t need information at the date or slot
          level, you can use this and not bother requesting the slots at all.

        - Locations with unknown availability have schedules, but no slots.

        - Some locations do not list slots when they are busy. We do our best to
          represent both free and busy slots, but some providers only publish
          the slots that are available, and we can’t get details on unavailable
          slots.

        - Some slots are individual slots, while others represent larger
          timeframes (often a whole day). The granularity of information depends
          on the data source.

        - Not all information about provider locations is available through this
          API. In particular, it does not show:
            - Provider organization name (`provider` in the main API), e.g. CVS,
              Hope Hostpital, etc.
            - Location type (`location_type` in the main API), e.g. mass
              vaccination site, clinic, pharmacy.
            - Whether you have to sign up for a waitlist (`requires_waitlist`
              in the main API).
            - Miscellaneous extra data (`meta` in the main API).
      responses:
        "200":
          description: SMART Scheduling Links manifest
components:
  schemas:
    CapacityRecord:
      type: object
      description: |
        Represents how many appointments for a particular set of vaccine
        products and dose types are available on a given date. There may be
        muliple capacity records for a given date with different products.
      properties:
        date:
          type: string
          format: date
          description: Date for which this capacity is valid.
          example: "2021-04-21"
        available:
          type: string
          enum: ["YES", "NO"]
          description: |
            Indicates whether appointments are currently available for booking
            on this date.
        available_count:
          type: integer
          format: int32
          description: |
            Total number of open appointment slots on this date. Not present if
            not known.
        unavailable_count:
          type: integer
          format: int32
          description: |
            Total number of non-open appointment slots on this date. Not
            present if not known.
        products:
          type: array
          items:
            type: string
          description: |
            List of vaccine products available on this date. Not present if not
            known. Current possible values include: ``moderna`,
            `moderna_age_6_11`, `moderna_age_0_5`, `pfizer`, `pfizer_age_5_11`,
            `pfizer_age_0_4`, `jj`, `sanofi`.
        dose:
          type: string
          description: |
            Dose type appointments are available for. Not present if not known.
            Current possible values: `all_doses`, `first_dose_only`,
            `second_dose_only`.
    SlotRecord:
      type: object
      description: |
        Represents the most fine-grained information about appointments from a
        particular source. This often represents single appointment slots, but
        may represent more coarse-grained timeframes (e.g. a morning or
        afternoon).
      properties:
        start:
          type: string
          format: date-time
          description: Time at which this slot starts.
          example: "2021-04-21T09:00:00Z"
        end:
          type: string
          format: date-time
          description: Time at which this slot ends.
          example: "2021-04-21T09:15:00Z"
        available:
          type: string
          enum: ["YES", "NO"]
          description: |
            Indicates whether this slot is available to be booked.
        available_count:
          type: integer
          format: int32
          description: |
            Total number of open appointments in the timeframe this slot
            represents. Not present if the unknown or the slot represents a
            single appointment.
        unavailable_count:
          type: integer
          format: int32
          description: |
            Total number of non-open appointments in the timeframe this slot
            represents. Not present if the unknown or the slot represents a
            single appointment.
        products:
          type: array
          items:
            type: string
          description: |
            List of vaccine products available for this slot. Not present if not
            known. Current possible values include: `moderna`,
            `moderna_age_6_11`, `moderna_age_0_5`, `pfizer`, `pfizer_age_5_11`,
            `pfizer_age_0_4`, `jj`, `sanofi`.
        dose:
          type: string
          description: |
            Dose type available for this slot. Not present if not known.
            Current possible values: `all_doses`, `first_dose_only`,
            `second_dose_only`.
    Availability:
      type: object
      required:
        - checked_at
        - available
      properties:
        location_id:
          type: string
          format: uuid
          description: |
            Location this availability applies to. Not present if the
            availability is a property of a location object, e.g. in requests
            to `/api/edge/locations`.
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        valid_at:
          type: string
          format: date-time
          description: Time this data was last known to be valid.
          example: "2021-04-21T09:12:33.001Z"
        checked_at:
          type: string
          format: date-time
          description: |
            Time the source was last checked for this data. (When `source` is a
            scraper, this and `valid_at` will usually be the same. When it is
            an API or some other method that includes data about when it was
            last accurate, `valid_at` reflects that time and `checked_at`
            reflects the time that source was queried. For most applications,
            you should monitor `valid_at` rather than `checked_at`.)
          example: "2021-04-21T09:12:33.001Z"
        changed_at:
          type: string
          format: date-time
          description: |
            The last time the availability actually changed. For example,
            `checked_at` and `valid_at` should usually be only minutes old, but
            `changed_at` could be hours old if people are not actively booking
            appointments at this location.
          example: "2021-04-21T09:12:33.001Z"
        available:
          type: string
          enum: ["YES", "NO", "UNKNOWN"]
          description: |
            Indicates whether appointments are currently available for booking.
        available_count:
          type: integer
          format: int32
          description: |
            Total number of open appointment slots. Not present if not known.
        products:
          type: array
          items:
            type: string
          description: |
            List of vaccine products available. Not present if not known.
            Current possible values include: `moderna`, `moderna_age_6_11`,
            `moderna_age_0_5`, `pfizer`, `pfizer_age_5_11`, `pfizer_age_0_4`,
            `jj`, `sanofi`.
        doses:
          type: array
          items:
            type: string
          description: |
            List of dose types appointments are available for. Not present if
            not known. Current possible values: `all_doses`, `first_dose_only`,
            `second_dose_only`.
        capacity:
          type: array
          items:
            $ref: "#/components/schemas/CapacityRecord"
          description: |
            Day-by-day appointment availability. Not present if not known.
        slots:
          type: array
          items:
            $ref: "#/components/schemas/SlotRecord"
          description: |
            As fine-grained information about appointments as available from
            the source. Not present if the same as `capacity`. This may
            represent individual appointment slots or larger timeframes.
        meta:
          type: object
          description: Any additional free-form data the source might provide.
    AvailabilityRecord:
      allOf:
        - { "$ref": "#/components/schemas/Availability" }
        - properties:
            source:
              type: string
              description: Name of the API client or scraper that generated this data.
          required:
            - source
    LocationAvailability:
      allOf:
        - { "$ref": "#/components/schemas/Availability" }
        - properties:
            sources:
              type: array
              items:
                type: string
              description: |
                Name of the API clients or scrapers that supplied data used to
                compile this availability object.
            minimum_eligible_age_months:
              type: number
              format: int32
              description: |
                The minimum eligible patient age (in months) based on the
                location and the available vaccine products. (For example, this
                will be `6` for a minimum age of 6 months, and `144` for a
                minimum age of 12 years.)

                This combines information about each vaccine in the `products`
                field of the availability data with the `minimum_age_months`
                field of the location. See
                [Eligible Age Ranges](#section/Eligible-Age-Ranges) for a
                deeper explanation.
          required:
            - sources
    Location:
      type: object
      properties:
        id:
          type: string
          format: uuid
        external_ids:
          type: array
          example: [["cvs", "abc"], ["vtrcks", "123"]]
          description: |
            Identifiers this location is known by in other systems. This field is
            represented by a list of lists where the first values of each sublist
            name other systems, e.g. `cvs` (for CVS store numbers), `vtrcks`
            (for VTrckS PINs), etc.; and the second values are the IDs in those
            systems.
        provider:
          type: string
        location_type:
          type: string
          enum: ["PHARMACY", "CLINIC", "MASS_VAX"]
        name:
          type: string
        address_lines:
          type: array
          items:
            type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        county:
          type: string
        position:
          type: object
          properties:
            longitude:
              type: number
              format: float
            latitude:
              type: number
              format: float
        info_phone:
          type: string
        info_url:
          type: string
        booking_phone:
          type: string
        booking_url:
          type: string
        description:
          type: string
        requires_waitlist:
          type: boolean
        minimum_age_months:
          type: number
          format: int32
          description: |
            The minimum patient age in months at this location. May be null if
            a minimum age is not known. (For example, this will be `6` for a
            minimum age of 6 months, and `144` for a minimum age of 12 years.)

            Pharmacists and doctors are authorized to administer vaccines to
            different age ranges, which means locations have minimum ages
            (determined by who is staffing them) in addition to the age ranges
            for particular vaccines.
        meta:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    LocationWithAvailability:
      allOf:
        - { "$ref": "#/components/schemas/Location" }
        - properties:
            availability:
              $ref: "#/components/schemas/LocationAvailability"
    LocationUpdate:
      allOf:
        - { "$ref": "#/components/schemas/Location" }
        - properties:
            availability:
              $ref: "#/components/schemas/AvailabilityRecord"
    LocationsPage:
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              format: url
              description: URL to the next page of results. May be relative URL.
        data:
          type: array
          items:
            $ref: "#/components/schemas/LocationWithAvailability"
    AvailabilityPage:
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              format: url
              description: URL to the next page of results. May be relative URL.
        data:
          type: array
          items:
            $ref: "#/components/schemas/AvailabilityRecord"
